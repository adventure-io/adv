#!/usr/bin/env bash
set -e

log(){
  if [[ ! $adv_quiet_flag > 0 ]]
  then
    printf "%b\n" "$*" ; return $? ;
  fi
  return 0;
}

print=""
shell=""

export adv_quiet_flag
true ${adv_quiet_flag:=0}
while (( $# > 0 ))
do
  token="$1"
  shift
  case "$token" in
    '--quiet')
      adv_quiet_flag=1
      ;;
    '-')
      print=1
      ;;
    *)
      shell="$token"
      ;;
  esac
done

if [ -z $shell ]
then
  shell="$(basename "$SHELL")"
fi

resolve_link() {
  $(type -p greadlink readlink | head -1) $1
}

abs_dirname() {
  local cwd="$(pwd)"
  local path="$1"

  while [ -n "$path" ]; do
    cd "${path%/*}"
    local name="${path##*/}"
    path="$(resolve_link "$name" || true)"
  done

  pwd
  cd "$cwd"
}

root="$(abs_dirname "$0")/.."

if [ -z "$print" ]; then
  case "$shell" in
  bash )
    profile='~/.bash_profile'
    ;;
  zsh )
    profile='~/.zshenv'
    ;;
  * )
    profile='your profile'
    ;;
  esac

  { log "# Load adv automatically by adding"
    log "# the following to ${profile}:"
    log
    log "eval \"\$(${_ADV_ROOT}/bin/adv init -)\""
    log
  } >&2

  exit 1
fi

echo "export PATH=\"\${PATH}:${_ADV_ROOT}/bin\""

case "$shell" in
bash | zsh )
  echo "source \"$root/completions/adv.${shell}\""
  ;;
esac

commands=(`adv commands --sh`)
IFS="|"
cat <<EOS
_adv_wrapper() {
  local command="\$1"
  if [ "\$#" -gt 0 ]; then
    shift
  fi

  case "\$command" in
  ${commands[*]})
    eval \`adv "sh-\$command" "\$@"\`;;
  *)
    command adv "\$command" "\$@";;
  esac
}
EOS

# zsh can't pass argument with aliases, but bash can.
# zsh can have functions with the name being only numbers, but bash can't.
# fix both cases here by letting zsh have a function, and bash have its alias.
case "$shell" in
bash )
  echo "alias adv=_adv_wrapper"
  ;;
zsh )
  echo "adv=_adv_wrapper"
  ;;
esac
